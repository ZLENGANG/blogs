import{_ as n,o as s,c as a,e as t}from"./app-3e796566.js";const p={},e=t(`<h2 id="chalk" tabindex="-1"><a class="header-anchor" href="#chalk" aria-hidden="true">#</a> chalk</h2><h3 id="知识点1-自定义-imports-引用" tabindex="-1"><a class="header-anchor" href="#知识点1-自定义-imports-引用" aria-hidden="true">#</a> 知识点1：自定义 imports 引用</h3><p>在 package.json 中定义：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;#ansi-styles&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./source/vendor/ansi-styles/index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;#supports-color&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./source/vendor/supports-color/index.js&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./source/vendor/supports-color/browser.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ansiStyles <span class="token keyword">from</span> <span class="token string">&#39;#ansi-styles&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> supportsColor <span class="token keyword">from</span> <span class="token string">&#39;#supports-color&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="知识点2-批量生成方法和构造者模式应用" tabindex="-1"><a class="header-anchor" href="#知识点2-批量生成方法和构造者模式应用" aria-hidden="true">#</a> 知识点2：批量生成方法和构造者模式应用</h3><p>根据 ansiStyles 配置批量生成构造者方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>styleName<span class="token punctuation">,</span> style<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>ansiStyles<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  styles<span class="token punctuation">[</span>styleName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> builder <span class="token operator">=</span> <span class="token function">createBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">createStyler</span><span class="token punctuation">(</span>style<span class="token punctuation">.</span>open<span class="token punctuation">,</span> style<span class="token punctuation">.</span>close<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">STYLER</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">IS_EMPTY</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> styleName<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> builder <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> builder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 createBuilder 生成构造者对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createBuilder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">self<span class="token punctuation">,</span> _styler<span class="token punctuation">,</span> _isEmpty</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">builder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arguments_</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">applyStyle</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token punctuation">(</span>arguments_<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span> arguments_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> arguments_<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> proto<span class="token punctuation">)</span><span class="token punctuation">;</span>

  builder<span class="token punctuation">[</span><span class="token constant">GENERATOR</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">;</span>
  builder<span class="token punctuation">[</span><span class="token constant">STYLER</span><span class="token punctuation">]</span> <span class="token operator">=</span> _styler<span class="token punctuation">;</span>
  builder<span class="token punctuation">[</span><span class="token constant">IS_EMPTY</span><span class="token punctuation">]</span> <span class="token operator">=</span> _isEmpty<span class="token punctuation">;</span>

  <span class="token keyword">return</span> builder<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="知识点3-在对象的原型-prototype-上新增属性" tabindex="-1"><a class="header-anchor" href="#知识点3-在对象的原型-prototype-上新增属性" aria-hidden="true">#</a> 知识点3：在对象的原型(prototype)上新增属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>createChalk<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> styles<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="知识点4-使用工厂模块快速生成-chalk-实例" tabindex="-1"><a class="header-anchor" href="#知识点4-使用工厂模块快速生成-chalk-实例" aria-hidden="true">#</a> 知识点4：使用工厂模块快速生成 chalk 实例</h3><p>定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createChalk</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">chalkFactory</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">createChalk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> chalk<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="知识点5-替换对象的原型" tabindex="-1"><a class="header-anchor" href="#知识点5-替换对象的原型" aria-hidden="true">#</a> 知识点5：替换对象的原型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">chalkFactory</span> <span class="token operator">=</span> <span class="token parameter">options</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">chalk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>strings</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> strings<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">applyOptions</span><span class="token punctuation">(</span>chalk<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>chalk<span class="token punctuation">,</span> createChalk<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> chalk<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="知识点6-向-n两侧注入转义字符" tabindex="-1"><a class="header-anchor" href="#知识点6-向-n两侧注入转义字符" aria-hidden="true">#</a> 知识点6：向\\n两侧注入转义字符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">stringEncaseCRLFWithFirstIndex</span><span class="token punctuation">(</span>
  string<span class="token punctuation">,</span> <span class="token comment">// 带\\n的初始字符串</span>
  prefix<span class="token punctuation">,</span> <span class="token comment">// 闭合字符串，\\n左侧注入</span>
  postfix<span class="token punctuation">,</span> <span class="token comment">// 开启字符串，\\n右侧注入</span>
  index <span class="token comment">// 第一个\\n位置序号</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> endIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> returnValue <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// 是否存在\\r</span>
    <span class="token keyword">const</span> gotCR <span class="token operator">=</span> string<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;\\r&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 向\\n两侧注入转移字符</span>
    returnValue <span class="token operator">+=</span> string<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">,</span> <span class="token punctuation">(</span>gotCR <span class="token operator">?</span> index <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> index<span class="token punctuation">)</span> <span class="token operator">-</span> endIndex<span class="token punctuation">)</span> <span class="token operator">+</span> prefix <span class="token operator">+</span> <span class="token punctuation">(</span>gotCR <span class="token operator">?</span> <span class="token string">&#39;\\r\\n&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> postfix<span class="token punctuation">;</span>
    <span class="token comment">// 获取\\n后面一个字符的位置</span>
    endIndex <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取下一个\\n的序号</span>
    index <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果存在\\n则继续循环</span>
  <span class="token comment">// 获取\\n后面的字符串进行拼接</span>
  returnValue <span class="token operator">+=</span> string<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","chalk.html.vue"]]);export{r as default};
